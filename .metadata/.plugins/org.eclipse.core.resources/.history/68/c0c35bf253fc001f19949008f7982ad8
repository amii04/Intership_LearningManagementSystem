package com.project.lms.servlet;

import java.io.IOException;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;

import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.mindrot.jbcrypt.BCrypt;

import com.project.lms.util.DBConnect;

@WebServlet("/login")
public class loginServlet extends HttpServlet {
    private static final long serialVersionUID = 1L;
    private static final Logger LOGGER = Logger.getLogger(loginServlet.class.getName());

    protected void doPost(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {

        String email = request.getParameter("email");
        String password = request.getParameter("password");
        LOGGER.info("Login attempt for email: " + email);

        if (email == null || password == null || email.isEmpty() || password.isEmpty()) {
            request.setAttribute("error", "Please fill in all fields.");
            request.getRequestDispatcher("login.jsp").forward(request, response);
            return;
        }

        try (Connection conn = DBConnect.getInstance().getConnection();
             PreparedStatement ps = conn.prepareStatement("SELECT password, role FROM users WHERE email = ?")) {

            ps.setString(1, email);
            ResultSet rs = ps.executeQuery();

            if (rs.next()) {
                String storedHashedPassword = rs.getString("password");
                String role = rs.getString("role");

                // âœ… Compare hashed password using BCrypt
                if (BCrypt.checkpw(password, storedHashedPassword)) {
                    HttpSession session = request.getSession();
                    session.setAttribute("user", email);
                    session.setAttribute("role", role);
                    session.setMaxInactiveInterval(1800); // Set session timeout (30 minutes)

                    if ("STUDENT".equalsIgnoreCase(role)) {
                        response.sendRedirect("studashboard.html");
                    } else if ("INSTRUCTOR".equalsIgnoreCase(role)) {
                        response.sendRedirect("instructordashboard.html");
                    } else {
                        request.setAttribute("error", "Invalid role detected.");
                        request.getRequestDispatcher("login.jsp").forward(request, response);
                    }
                } else {
                    request.setAttribute("error", "Invalid password.");
                    request.getRequestDispatcher("login.jsp").forward(request, response);
                }
            } else {
                request.setAttribute("error", "User not found.");
                request.getRequestDispatcher("login.jsp").forward(request, response);
            }
            rs.close(); // Close ResultSet
        } catch (SQLException e) {
            LOGGER.log(Level.SEVERE, "Database connection error", e);
            request.setAttribute("error", "Database error. Please try again later.");
            request.getRequestDispatcher("login.jsp").forward(request, response);
        }
    }
}
